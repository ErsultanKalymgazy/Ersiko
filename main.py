import logging
import asyncio
from aiogram import Bot, Router, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, BufferedInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import Database

from errors import CleanBasketError, MakeOrderError, NotEnoughMoneyError

from consts import API_TOKEN, menu_photos, menu_dishes, menu_subdishes

logging.basicConfig(level=logging.INFO)

router = Router()

bot = Bot(token=API_TOKEN)
db = Database()


async def main():
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)


@router.message(CommandStart())
async def start(message: types.Message):
    buttons = [[KeyboardButton(text="–ú–µ–Ω—é üìù")],
               [KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ üóë")],
               [KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üåç")],
               [KeyboardButton(text="–ö–æ—à–µ–ª—ë–∫ üí∞")],
               [KeyboardButton(text="–ó–∞–∫–∞–∑—ã üõé")]]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await db.create_tables()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=keyboard)
    is_new_user = await db.add_user(message.from_user.id, message.from_user.username)
    if is_new_user:
        await db.add_user_wallet(message.from_user.id)


@router.message(lambda message: message.text == "–ú–µ–Ω—é üìù")
async def menu(message: types.Message):
    menu_list = []
    for dish, photo_url in menu_photos.items():
        button = InlineKeyboardButton(text=dish, callback_data=f"menu_item_{dish}")
        menu_list.append(button)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[menu_list], row_width=2)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é: ‚úçÔ∏è", reply_markup=keyboard)


@router.message(lambda message: message.text == "–ö–æ—Ä–∑–∏–Ω–∞ üóë")
async def basket(message: types.Message):
    user_id = message.from_user.id
    basket = await db.get_basket(user_id)

    if basket:
        # basket_text = "\n".join([f"{item_name}: {quantity}" for item_name, quantity in basket.items()])
        # button = InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clean_basket")
        # keyboard = InlineKeyboardMarkup(inline_keyboard=[[button]], row_width=2)
        # await message.answer(basket_text, reply_markup=keyboard)
        basket_item_row = []
        title_row = [
            InlineKeyboardButton(text="–ë–ª—é–¥–æ", callback_data=f"d"),
            InlineKeyboardButton(text=str("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"), callback_data=f"d"),
            InlineKeyboardButton(text=str("–¶–µ–Ω–∞"), callback_data=f"d")
        ]
        basket_item_row.append(title_row)
        basket_items_sum = 0.0
        for item_name, item_info in basket.items():
            basket_items_sum += item_info["price"]
            row = [
                InlineKeyboardButton(text=item_name, callback_data=f"d"),
                InlineKeyboardButton(text=str(item_info["quantity"]), callback_data=f"d"),
                InlineKeyboardButton(text=str(item_info["price"]), callback_data=f"d")
            ]
            basket_item_row.append(row)
        total_button = InlineKeyboardButton(text=f"–û–±—â–∞—è —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã:{str(basket_items_sum)}", callback_data="d")
        basket_item_row.append([total_button])
        clean_basket_button = InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clean_basket")
        make_order_button = InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="make_order")
        basket_item_row.append([make_order_button, clean_basket_button])
        keyboard = InlineKeyboardMarkup(inline_keyboard=basket_item_row, row_width=3)
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫: üí∏", reply_markup=keyboard)
    else:
        basket_text = "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ ‚ùå"
        await message.answer(basket_text)

@router.message(lambda message: message.text == "–ó–∞–∫–∞–∑—ã üõé")
async def orders(message: types.Message):
    user_id = message.from_user.id
    orders = await db.get_orders(user_id)
    basket_item_row = []
    title_row = [
        InlineKeyboardButton(text="–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", callback_data=f"d"),
        InlineKeyboardButton(text=str("–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞"), callback_data=f"d"),
        InlineKeyboardButton(text=str("–°—Ç–∞—Ç—É—Å"), callback_data=f"d"),
        InlineKeyboardButton(text=str("–ü–æ–¥—Ä–æ–±–Ω–µ–µ"), callback_data=f"d")
    ]
    basket_item_row.append(title_row)
    if len(orders) > 0:
        for order_id, order_sum, status in orders:
            row = [
                InlineKeyboardButton(text=str(order_id), callback_data=f"d"),
                InlineKeyboardButton(text=str(order_sum), callback_data=f"d"),
                InlineKeyboardButton(text=str(status), callback_data=f"d"),
                InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"get_order_{order_id}")
            ]
            basket_item_row.append(row)
        keyboard = InlineKeyboardMarkup(inline_keyboard=basket_item_row, row_width=3)
        await message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤: üìÉ", reply_markup=keyboard)
    else:
        orders_text = "–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç ‚ùå"
        await message.answer(orders_text)


@router.callback_query(lambda c: c.data.startswith('get_order_'))
async def process_callback(callback_query: types.CallbackQuery):
    order_id = callback_query.data.replace('get_order_', '')
    order_items = await db.get_order_items(order_id)
    basket_text = "\n".join([f"–ë–ª—é–¥–æ: {item_name}, –ö–æ–ª.: {quantity}, –¶–µ–Ω–∞: {price}" for item_name, quantity, price in order_items])
    await callback_query.message.answer(basket_text)


@router.callback_query(lambda c: c.data == "clean_basket")
async def clean_basket(message: types.Message):
    user_id = message.from_user.id
    try:
        await db.clean_basket(user_id)
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ ‚úÖ")
    except CleanBasketError as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –æ—á–∏—â–µ–Ω–∞ üî¥ !")


@router.callback_query(lambda c: c.data == "make_order")
async def make_order(message: types.Message):
    user_id = message.from_user.id
    try:
        await db.make_order(user_id)
        await message.answer("–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω ‚úÖ ")
    except NotEnoughMoneyError as e:
        await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ üí¢ ")
    except MakeOrderError as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∑–∞–∫–∞–∑ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è üî¥ !")


@router.message(lambda message: message.text == "–ö–æ—à–µ–ª—ë–∫ üí∞")
async def basket(message: types.Message):
    user_id = message.from_user.id
    cash_num = await db.get_user_wallet(user_id)
    print()
    await message.answer(f"–í–∞—à –æ—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤ –∫–æ—à–µ–ª—å–∫–∞: {str(cash_num)} —Ç–µ–Ω–≥–µ")


@router.message(lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üåç")
async def info(message: types.Message):
    await message.answer("""–ú—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É:

–ê—Å—Ç–∞–Ω–∞, 1-—è –≠–∫—Å–ø–æ —É–ª–∏—Ü–∞, 55

üïõ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:

–° 8:00 –¥–æ 22:00 –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö """)


@router.callback_query(lambda c: c.data.startswith('menu_item_'))
async def process_callback(callback_query: types.CallbackQuery):
    menu = callback_query.data.replace('menu_item_', '')
    with open(menu_photos[menu], "rb") as photo_file:
        photo_bytes = photo_file.read()

    menu_list = []
    i = 0
    row_menu_list = []
    for menu_dish in menu_dishes[menu]:
        if i % 2 == 0:
            list_copy = row_menu_list.copy()
            menu_list.append(list_copy)
            row_menu_list = []
        if isinstance(menu_subdishes[menu_dish], dict):
            button = InlineKeyboardButton(text=f"{menu_dish} - {menu_subdishes[menu_dish]['price']} —Ç–µ–Ω–≥–µ",
                                          callback_data=f"dish_item_{menu_dish}")
        else:
            button = InlineKeyboardButton(text=menu_dish, callback_data=f"dish_item_{menu_dish}")
        row_menu_list.append(button)
        i += 1
    if len(row_menu_list) > 0:
        menu_list.append(row_menu_list)
    keyboard = InlineKeyboardMarkup(inline_keyboard=menu_list, row_width=1)
    await bot.send_photo(chat_id=callback_query.from_user.id,
                         photo=BufferedInputFile(file=photo_bytes, filename=menu_photos[menu]),
                         caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {menu}. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—é")
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–ª—é–¥–∞ –∏–ª–∏ –±–ª—é–¥–æ:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith('dish_item_'))
async def process_callback(callback_query: types.CallbackQuery):
    dish = callback_query.data.replace('dish_item_', '')
    if isinstance(menu_subdishes[dish], list):
        subdishes_list = []
        i = 0
        row_subdishes_list = []
        for subdish in menu_subdishes[dish]:
            if i % 1 == 0:
                list_copy = row_subdishes_list.copy()
                subdishes_list.append(list_copy)
                row_subdishes_list = []
            button = InlineKeyboardButton(text=f"{subdish['title']} - {subdish['price']} —Ç–µ–Ω–≥–µ",
                                          callback_data=f"dish_price_item_{dish}:{i}")
            row_subdishes_list.append(button)
            i += 1
        if len(row_subdishes_list) > 0:
            subdishes_list.append(row_subdishes_list)

        keyboard = InlineKeyboardMarkup(inline_keyboard=subdishes_list, row_width=4)
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=keyboard)
    else:
        quantity = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥
        user_id = callback_query.from_user.id
        await db.add_item_to_basket(user_id, dish, quantity, menu_subdishes[dish]["price"])
        await callback_query.message.answer(f"–°–ø–∞—Å–∏–±–æ {dish} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")


@router.callback_query(lambda c: c.data.startswith('dish_price_item_'))
async def process_callback(callback_query: types.CallbackQuery):
    dish = callback_query.data.replace('dish_price_item_', '')
    dish_tmp = dish.split(':')  # –ë—É—Ä–∏—Ç–æ:0
    last_dish = menu_subdishes[dish_tmp[0]][int(dish_tmp[1])]
    quantity = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥
    user_id = callback_query.from_user.id
    await db.add_item_to_basket(user_id, last_dish["title"], quantity, last_dish["price"])
    await callback_query.message.answer(f"–°–ø–∞—Å–∏–±–æ {last_dish['title']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")


@router.callback_query(lambda c: c.data.startswith('subdish_item_'))
async def process_callback(callback_query: types.CallbackQuery):
    dish = callback_query.data.replace('subdish_item_', '')
    quantity = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥
    user_id = callback_query.from_user.id
    await db.add_item_to_basket(user_id, dish, quantity)
    await callback_query.message.answer(f"–°–ø–∞—Å–∏–±–æ {dish} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")


if __name__ == '__main__':
    asyncio.run(main())
